{"version":3,"sources":["api/quotes/quotes.controller.js"],"names":["index","show","create","update","destroy","res_handler","templateService","transporter","createTransport","service","auth","type","user","gmail","clientId","clientSecret","refreshToken","accessToken","req","res","send","files","data","body","console","log","attachments","forEach","value","key","fileName","parse","originalname","push","name","path","mimetype","encoding","context","NameSurname","mail","Email","apptype","AppType","budget","Budget","description","Description","loadTemplates","then","sendMail","from","to","subject","text","html","error","info","messageId","response"],"mappings":"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","file":"quotes.controller.js","sourcesContent":["import Quote from './quotes.model';\r\nimport * as res_handler from '../res_handler';\r\nimport config from '../../config';\r\n\r\nimport nodemailer from 'nodemailer';\r\nimport Promise from 'bluebird';\r\nimport * as templateService from './templateLoader';\r\nimport _ from 'lodash';\r\nimport path from 'path';\r\n\r\n// DEFINE THE TRANSPORTER\r\nlet transporter = nodemailer.createTransport({\r\n    service: 'gmail',\r\n    auth: {\r\n      type: 'OAuth2',\r\n      user: config.gmail.user,\r\n      clientId: config.gmail.clientId,\r\n      clientSecret: config.gmail.clientSecret,\r\n      refreshToken: config.gmail.refreshToken,\r\n      accessToken: config.gmail.accessToken\r\n    }\r\n});\r\n\r\n// Gets a list items\r\nexport function index(req, res) {\r\n\r\n}\r\n// Gets a sing item from DB\r\nexport function show(req, res) {\r\n    res.send('GET ID handler for /quotes route.');\r\n}\r\n// Creates a sing item inside DB\r\nexport function create(req, res) {\r\n\r\n  if (req.files) {\r\n    res.send(200, 'Files uploaded correctly');\r\n    var data = req.body;\r\n    console.log('request DATA: ' + JSON.stringify(data));\r\n    console.log('---------------------------');\r\n    console.log('---------------------------');\r\n    console.log('request files: ' + JSON.stringify(req.files));\r\n    var attachments = [];\r\n    _.forEach(req.files, function(value, key) {\r\n      console.log('key: ' + key,' value: ' + value);\r\n      var fileName = path.parse(value.originalname);\r\n      attachments.push(\r\n        {\r\n          'filename': fileName.name,\r\n          'path': value.path,\r\n          'contentType': value.mimetype,\r\n          'encoding': value.encoding\r\n      });\r\n    });\r\n  }\r\n  else {\r\n    console.log(JSON.stringify(req.body));\r\n    var attachments = [];\r\n  }\r\n\r\n  let context = {\r\n    name: req.body.NameSurname,\r\n    mail: req.body.Email,\r\n    apptype: req.body.AppType,\r\n    budget: req.body.Budget,\r\n    description: req.body.Description\r\n  }\r\n\r\n  //load the mail templates of the user followup\r\n  templateService.loadTemplates(context, 'followup').then((res) => {\r\n    // //send a followup mail to the user to know that everything went good\r\n    return transporter.sendMail({ // setup email data with unicode symbols\r\n        from: context.name + ' < ' + context.mail + ' >', // sender address\r\n        to: 'paolo.mangia.dev@gmail.com', // list of receivers\r\n        subject: res.subject, // Subject line\r\n        text: res.text, // plain text body\r\n        html: res.html, // html body\r\n        attachments: attachments\r\n      }, (error, info) => {\r\n        if (error) {\r\n            return console.log(error);\r\n        }\r\n        console.log('Message %s sent: %s', info.messageId, info.response);\r\n    });\r\n  });\r\n\r\n  //load the mail templates of the netglitch incoming quote request\r\n  templateService.loadTemplates(context, 'netglitch').then((res) => {\r\n    // //send the email to netglitch to let them know of a new incoming quote request\r\n    return transporter.sendMail({ // setup email data with unicode symbols\r\n        from: context.name + ' < ' + context.mail + ' >', // sender address\r\n        to: 'paolo.mangia.dev@gmail.com', // list of receivers\r\n        subject: res.subject, // Subject line\r\n        text: res.text, // plain text body\r\n        html: res.html, // html body\r\n        attachments: attachments\r\n      }, (error, info) => {\r\n        if (error) {\r\n            return console.log(error);\r\n        }\r\n        console.log('Message %s sent: %s', info.messageId, info.response);\r\n    });\r\n  });\r\n\r\n}\r\n// Updates a sing item inside DB\r\nexport function update(req, res) {\r\n    res.send('PUT handler for /quotes route.');\r\n}\r\n// Delete a sing item inside DB\r\nexport function destroy(req, res) {\r\n    res.send('DELETE handler for /quotes route.');\r\n}\r\n"]}