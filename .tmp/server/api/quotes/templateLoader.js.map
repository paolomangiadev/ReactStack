{"version":3,"sources":["api/quotes/templateLoader.js"],"names":["loadTemplates","EmailTemplate","context","templatePath","template","join","__dirname","resolve","reject","render","err","res","console","log"],"mappings":";;;;;;;;;;QAMgBA,a,GAAAA,a;;AANhB;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA,IAAMC,gBAAgB,yBAAWA,aAAjC;;AAEO,SAASD,aAAT,CAAwBE,OAAxB,EAAiCC,YAAjC,EAA+C;AACpD,MAAIC,WAAW,IAAIH,aAAJ,CAAkB,eAAKI,IAAL,CAAUC,SAAV,EAAqB,oBAAoBH,YAAzC,CAAlB,CAAf;AACA,SAAO,uBAAa,UAACI,OAAD,EAAUC,MAAV,EAAqB;AACvCJ,aAASK,MAAT,CAAgBP,OAAhB,EAAyB,UAACQ,GAAD,EAAMC,GAAN,EAAc;AACrC,UAAIA,GAAJ,EAAS;AACP;AACAJ,gBAAQI,GAAR;AACD,OAHD,MAIK;AACHC,gBAAQC,GAAR,CAAY,iBAAiB,yBAAeH,GAAf,CAA7B;AACD;AACF,KARD;AASD,GAVM,CAAP;AAWD","file":"templateLoader.js","sourcesContent":["import nodemailer from 'nodemailer';\r\nimport Promise from 'bluebird';\r\nimport mailparser from 'email-templates';\r\nimport path from 'path';\r\nconst EmailTemplate = mailparser.EmailTemplate;\r\n\r\nexport function loadTemplates (context, templatePath) {\r\n  let template = new EmailTemplate(path.join(__dirname, 'mail-templates/' + templatePath));\r\n  return new Promise ((resolve, reject) => {\r\n    template.render(context, (err, res) => {\r\n      if (res) {\r\n        // console.log('we got a result: ' + JSON.stringify(res));\r\n        resolve(res);\r\n      }\r\n      else {\r\n        console.log('no results: ' + JSON.stringify(err));\r\n      }\r\n    });\r\n  });\r\n}\r\n"]}